{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","sortByOptions","SearchBar","Object","keys","sortByOption","sortByOptionValue","key","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qUA8BeA,G,6LAvBP,OACI,yBAAKC,UAAU,YACzB,yBAAKA,UAAU,mBACb,yBAAKC,IAAKC,KAAKC,MAAMC,SAASC,SAAUC,IAAI,MAE9C,4BAAKJ,KAAKC,MAAMC,SAASG,MACzB,yBAAKP,UAAU,wBACb,yBAAKA,UAAU,oBACb,2BAAIE,KAAKC,MAAMC,SAASI,SACxB,2BAAIN,KAAKC,MAAMC,SAASK,MACxB,2BAAIP,KAAKC,MAAMC,SAASM,MAAxB,IAAgCR,KAAKC,MAAMC,SAASO,UAEtD,yBAAKX,UAAU,oBACb,4BAAKE,KAAKC,MAAMC,SAASQ,UACzB,wBAAIZ,UAAU,UAAUE,KAAKC,MAAMC,SAASS,QAC5C,2BAAIX,KAAKC,MAAMC,SAASU,oB,GAjBPC,IAAMC,YCWdC,E,iLAVP,OACI,yBAAKjB,UAAU,gBACVE,KAAKC,MAAMe,WAAWC,KAAI,SAAAf,GACvB,OAAO,kBAAC,EAAD,CAAUA,SAAUA,Y,GALpBW,IAAMC,WCA3BI,G,MAAgB,CAClB,aAAc,aACd,gBAAiB,SACjB,gBAAiB,iBA8BNC,E,8LAzBP,OAAOC,OAAOC,KAAKH,GAAeD,KAAI,SAAAK,GACjC,IAAIC,EAAoBD,EACxB,OAAO,wBAAIE,IAAKD,GAAoBD,Q,+BAIzC,OACI,yBAAKxB,UAAU,aACzB,yBAAKA,UAAU,0BACb,uDAIF,yBAAKA,UAAU,oBACb,2BAAO2B,YAAY,sBACnB,2BAAOA,YAAY,YAErB,yBAAK3B,UAAU,oBACb,6C,GApBoBe,IAAMC,WCLxBZ,EAAW,CACfC,SAAU,gFACVE,KAAM,sBACNC,QAAS,sBACTC,KAAM,aACNC,MAAO,KACPC,QAAS,QACTC,SAAU,UACVC,OAAQ,IACRC,YAAa,IAGTI,EAAa,CAACd,EAAUA,EAAUA,EAAUA,EAAUA,EAAUA,GAYvDwB,MAVf,WACE,OACE,yBAAK5B,UAAU,OACf,wCACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAckB,WAAaA,MCZXW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.002eafbe.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css'\n\n\n\nclass Business extends React.Component {\n    render() {\n        return (\n            <div className=\"Business\">\n  <div className=\"image-container\">\n    <img src={this.props.business.imageSrc} alt=''/>\n  </div>\n  <h2>{this.props.business.name}</h2>\n  <div className=\"Business-information\">\n    <div className=\"Business-address\">\n      <p>{this.props.business.address}</p>\n      <p>{this.props.business.city}</p>\n      <p>{this.props.business.state} {this.props.business.zipCode}</p>\n    </div>\n    <div className=\"Business-reviews\">\n      <h3>{this.props.business.category}</h3>\n      <h3 className=\"rating\">{this.props.business.rating}</h3>\n      <p>{this.props.business.reviewCount}</p>\n    </div>\n  </div>\n</div>\n        )\n    }\n}\n\nexport default Business;","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business'\n\nclass BusinessList extends React.Component {\n    render() {\n        return (\n            <div className=\"BusinessList\">\n                {this.props.businesses.map(business => {\n                    return <Business business={business}/>;\n                })}   \n            </div>\n            )\n            }\n}\n\nexport default BusinessList;","import React from 'react'\nimport './SearchBar.css'\n\n\nconst sortByOptions = {\n    'Best Match': 'best_match',\n    'Highest Rated': 'rating',\n    'Most Reviewed': 'review_count'\n};\n\nclass SearchBar extends React.Component {\n    renderSortByOptions() {\n        return Object.keys(sortByOptions).map(sortByOption => {\n             let sortByOptionValue = sortByOption\n             return <li key={sortByOptionValue}>{sortByOption}</li>\n            });\n    }\n    render() {\n        return (\n            <div className=\"SearchBar\">\n  <div className=\"SearchBar-sort-options\">\n    <ul>\n      renderSortByOptions();\n    </ul>\n  </div>\n  <div className=\"SearchBar-fields\">\n    <input placeholder=\"Search Businesses\" />\n    <input placeholder=\"Where?\" />\n  </div>\n  <div className=\"SearchBar-submit\">\n    <a>Let's Go</a>\n  </div>\n</div>\n        )\n    }\n}\n\nexport default SearchBar;","import React from 'react';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\n// import logo from './logo.svg';\nconst business = {\n  imageSrc: 'https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg',\n  name: 'MarginOtto Pizzeria',\n  address: '1010 Paddington Way',\n  city: 'Flavortown',\n  state: 'NY',\n  zipCode: '10101',\n  category: 'Italian',\n  rating: 4.5,\n  reviewCount: 90\n};\n\nconst businesses = [business, business, business, business, business, business];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <h1>ravenous</h1>\n    <SearchBar/>\n    <BusinessList businesses={ businesses }/> \n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}